// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  favorite   Favorite[] 
  accounts     Account[]
  sessions     Session[]
  listings     Listing[]
  reservations Reservation[]

  stripeCustomerId       String?                @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?                @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?                @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?              @map(name: "stripe_current_period_end")

  isTwoFactorEnabled     Boolean                @default(false)
  twoFactorConfirmation  TwoFactorConfirmation?

  @@map(name: "users")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id")   @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id")   @db.ObjectId  
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id")  @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  
  title         String
  description   String
  image         String
  category      String
  location      String
  rooms         Int
  bedrooms      Int
  bathrooms     Int
  guests        Int
  price         Int

  createdAt     DateTime @default(now())

  reservations Reservation[]
  favorite Favorite[]

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)

}

model Reservation {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  listingId         String  @db.ObjectId
  
  startDate         DateTime
  endDate           DateTime
  totalPrice        Int
  // paymentStatus     Boolean  @default(false)
  // paymentIntentId   String   @unique
  // bookedAt          DateTime @default(now())
  createdAt         DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  id String @id @default(auto()) @map("_id")  @db.ObjectId

  User   User?   @relation(fields: [userId], references: [id])
  userId String?  @db.ObjectId
  Listing   Listing?   @relation(fields: [listingId], references: [id])
  listingId String? @db.ObjectId

  createAt DateTime @default(now())
}