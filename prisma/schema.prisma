// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  favoriteIds   String[]

  accounts     Account[]
  sessions     Session[]
  listings     Listing[]
  reservations Reservation[]

  stripeCustomerId       String?                @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?                @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?                @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?              @map(name: "stripe_current_period_end")
  isTwoFactorEnabled     Boolean                @default(false)
  twoFactorConfirmation  TwoFactorConfirmation?

  @@map(name: "users")
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map(name: "verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")  @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Listing {
  id            String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  
  title         String
  description   String
  image         String
  category      String
  locationValue String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  price         Int

  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  reservations Reservation[]

  // @@fulltext([title])
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@index([userId])
}

// model Room {
//   id             String  @id @default(cuid()) @map("_id")
//   title          String
//   description    String
//   bedCount       Int     @default(0)
//   guestCount     Int     @default(0)
//   bathroomCount  Int     @default(0)
//   kingBed        Int     @default(0)
//   queenBed       Int     @default(0)
//   image          String
//   breakfastPrice Int
//   roomPrice      Int
//   roomService    Boolean @default(false)
//   Tv             Boolean @default(false)
//   balcony        Boolean @default(false)
//   freeWifi       Boolean @default(false)
//   cityView       Boolean @default(false)
//   oceanView      Boolean @default(false)
//   mountainView   Boolean @default(false)
//   forestView     Boolean @default(false)
//   AC             Boolean @default(false)
//   soundProof     Boolean @default(false)

//   listingId String
//   Listing   Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    String

//   reservation Reservation[]

//   @@index([listingId])
//   @@index([userId])
// }

model Reservation {
  id                String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  listingId         String  @db.ObjectId
  startDate         DateTime
  endDate           DateTime
  totalPrice        Int
  // paymentStatus     Boolean  @default(false)
  // paymentIntentId   String   @unique
  bookedAt          DateTime @default(now())
  createdAt         DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([userId])
}
